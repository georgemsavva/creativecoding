[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is my blog for creative coding."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nLissajous curves\n\n\n\n\n\n\n\nart\n\n\nR\n\n\n\n\nThis post describes one of my favourite pieces of creative coding. The process followed here is more-or-less the process by which I came to the final image, although there was a a lot more trial and error the first time around! The work is based around Lissajous curves, which are widely used in mathematical art and take their name from Jules Lissajous who extensively explored them in the 19th century.\n\n\n\n\n\n\nJul 7, 2022\n\n\nGeorge\n\n\n\n\n\n\n  \n\n\n\n\nMystery curves\n\n\n\n\n\n\n\nart\n\n\nR\n\n\n\n\n‘Mystery curves’ are described by Frank Farris in his book Creating Symmetry. They are a kind of circular harmonograph, each created by summing three circular components, and are the basis for a lot of my creative coding.\n\n\n\n\n\n\nMay 2, 2022\n\n\nGeorge\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\nWelcome to my Creative Coding blog.\n\n\n\n\n\n\nMay 2, 2022\n\n\nGeorge\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/lissajous/index.html#lissajous-curves",
    "href": "posts/lissajous/index.html#lissajous-curves",
    "title": "Lissajous curves",
    "section": "Lissajous curves",
    "text": "Lissajous curves\nLissajous curves are the shapes traced out by sinusoidal motion in two dimensions. They are characterised by the equations:\n\\[\\begin{align*}\nx & = A\\times\\sin(f_x t - \\delta_x) \\\\\ny & = B\\times\\cos(f_y t - \\delta_y) \\\\\n\\end{align*}\\]\nWhere \\(A\\) and \\(B\\) are amplitudes, \\(f_x\\) and \\(f_y\\) are the frequencies of the motion and \\(\\delta_x\\) and \\(\\delta_y\\) the phase shift.\nIt is simple to draw a Lissajous curve in R using:\n\nt = seq(0,10,0.01)\n\nx = sin(2*pi*t)\ny = cos(3*pi*t)\n\nplot(x,y,type=\"l\",asp=1)\n\n\n\n\nBy visualising the motion in both dimensions it should be clear how the shapes arise:\n\nt = seq(0,2,0.01)\nx = sin(2*pi*t)\ny = cos(6*pi*t)\nlimits = c(-1,1)\n\nfor(i in seq(0,2,l=100)){\n  plot(x,y,type=\"l\",asp=1,xlim=1.2*limits,ylim=1.2*limits)\n  lines(x=c(sin(2*i*pi),sin(2*i*pi),-1.1),\n        y=c(-1.1,cos(6*pi*i),cos(6*pi*i)),pch=20,type=\"o\",lty=\"dashed\")\n  }\n\n\n\n\nBy changing the frequencies we can generate some familiar shapes:\n\nfor(i in 1:4) for(j in 2:5){\n  plot(x = sin(i*pi*t),\n       y=cos(j*pi*t),\n       type=\"l\",asp=1,xlim=limits,ylim=limits,\n       main=sprintf(\"i=%d; j=%d\",i,j))\n}\n\n\n\n\nThere are lots of interesting things to do with Lissajous curves. Eg we can overlay lots of curves with different frequencies.\n\nplot(NA, xlim=limits,ylim=limits,asp=1)\nfor(i in 1:4) for(j in 2:5){\n  points(x = sin(i*pi*t),y=cos(j*pi*t),type=\"l\")\n}\n\n\n\n\nNow lets add a few more curves, think about how the colour and intensity should depend on the frequency, remove the axes and annotation etc. This image isn’t great but you can start to see how you’d make something interesting..\n\npar(mar=c(1,1,1,1))\nplot(NA, xlim=limits,ylim=limits,asp=1,axes=F,ann=F)\nfor(i in 1:10) for(j in -10:10){\n  points(x = sin(i*pi*t),\n         y = cos(j*pi*t),type=\"l\",\n         lwd=5/(abs(i-j)+2),\n         col=hsv(h=.5+j/20,\n         s=1/(abs(i-j)+2),\n         v=1-1/(abs(i-j)+2),\n         alpha=1/(abs(i-j)+2)))\n}\n\n\n\n\nWe can make the frequencies increase as a geometric rather than an arithmetic sequence. Here the \\(x\\) frequency is fixed at 5 and the \\(y\\) frequency varies from \\(2\\times 2^{-4}\\) to \\(2\\times 2^4\\). Again this output isn’t especially pretty but its the set of curves we ultimately use for the final output.\n\nt = seq(0,10,0.001)\npar(mar=c(1,1,1,1))\nlimits=c(-1,1)\nplot(NA, xlim=limits,ylim=limits,asp=1,axes=F,ann=F)\nfor(i in 5) for(a in (-4:4)){\n  points(x = sin(i*pi*t),\n         y = cos(2*2^a*pi*t),type=\"l\",\n         lwd=2,\n         col=hsv(h=.6,\n                 s=.5,v=.5,\n                 alpha=1/(abs(a)+1)))\n}\n\n\n\n\nNow for the part where we diverge from classic Lissajous curve shape.\nThe next image is the same as the previous one, except that I have replaced \\(x\\) with \\(x^3\\) and \\(y\\) with \\(y^3\\). I also swapped the \\(x\\) and \\(y\\) axes because the image looked nicer that way around.\nRaising the \\(x\\) and \\(y\\) positions to the third power retains the range of the curve but bunches up the curves along the axes and makes the shapes more iteresting.\n\nt = seq(0,10,0.001)\npar(mar=c(1,1,1,1))\nlimits=c(-1,1)\nplot(NA, xlim=limits,ylim=limits,asp=1,axes=F,ann=F)\nfor(i in 5) for(a in (-4:4)){\n  points(y = sin(i*pi*t)^3,\n         x = cos(2*2^a*pi*t)^3,type=\"l\",\n         lwd=2,\n         col=hsv(h=.6,\n                 s=.5,v=.5,\n                 alpha=1/(abs(a)+1)))\n}\n\n\n\n\nThe other major innovation is to plot points of random sizes instead of lines, to create the textured effect in the final image.\nSomething else interesting happens when we switch to points instead of lines; since each path has the same number of points the shorter paths become denser so they are more prominent in the image:\n\nt = seq(0,50,l=1e4)\npar(mar=c(1,1,1,1))\nlimits=c(-1,1)\nplot(NA, xlim=limits,ylim=limits,asp=1,axes=F,ann=F)\nfor(i in 5) for(a in (-4:4)){\n  points(y = sin(i*pi*t)^3,\n         x = cos(2*2^a*pi*t)^3,type=\"p\",\n         cex=.5*runif(1000),\n         pch=20,\n         col=hsv(h=.6,\n                 s=runif(1000),v=runif(1000),\n                 alpha=runif(1000)/(abs(a)+1)))\n}\n\n\n\n\nThis is close to the final image! Tweaking some parameters can improve the balance between the curves, and lead us to something we are happy with.\nThe complete self-contained code for the final image is shown below.\nI have tweaked the point sizes a bit so they depend on which curve is being drawn, and used a normal distribution for the point sizes to get a longer tail of larger points.\nThe point hue is random, there is an off-white background and the number of points per curve is 30000. The frequency is always 5 in the \\(y\\) dimension, but varies from \\(2\\times 3^-4\\) to \\(2\\times 3^4\\) in the \\(x\\) dimension.\n\nset.seed(10072022)\nN=3e4\nt = seq(0,300,l=N)\npar(mar=2*c(1,1,1,1),bg=\"#fafafa\")\nlimits = c(-1,1)\n\nplot(NA, xlim=limits,ylim=limits,ax=F,an=F)\nfor(j in 2*3^(seq(-4,4,1))){\n  points(y = sin(5*pi*t)^3,\n         x = cos(j*pi*t)^3,\n         type=\"p\",\n         pch=20,\n         cex=rnorm(N)^1.0*.4*cos(t*pi/4+pi/3)+.05*(j==6)+.1*(j==2), # Random size\n         col=hsv(h=rnorm(N,.7,.1)%%1, # Random hue\n                 s=runif(N,0,1),      # Random saturation\n                 v=runif(N,0,1),      # Random value\n                 alpha=runif(N)))}    # Random alpha\n\n\n\n\nI am delighted with this image. The left and right panels make a lovely counterpoint to each other, as does the relationship between the two ‘major’ paths in each. The near-symmetry within each panel is an accident but I think it adds a lot to the final composition. ‘Cubing’ the Lissajous curves makes them familiar but not too familiar, in my opinion purely sinusoidal shapes can be a bit dull.\nThe intersections between paths are particularly pleasing, and the density and distribution of the points feels very organic. You could of course change the random number seed to get a different arrangement of sizes and colours.\nThe only thing I don’t like so much is the very high density of points in the dead centre of the image. I could try to artificially lighten this area but I don’t think that would help much. I also wonder if the overall colour and density is a little too uniform, but I can’t imagine how this could be improved."
  },
  {
    "objectID": "posts/mystery/index.html#artistic-augmentations",
    "href": "posts/mystery/index.html#artistic-augmentations",
    "title": "Mystery curves",
    "section": "Artistic augmentations",
    "text": "Artistic augmentations\nNow there’s a few things we would want to change about this plot. We don’t want the axes or the annotation, we would like it to be a connected as a line rather than a series of points, and we would like the aspect ratio to be 1. I also set and the linewidth lwd to be 2.\nSo we can amend our script as follows:\n\nt = seq(0, 4, l=1000)\nz = 1i^t\nplot(z, axes=FALSE, ann=FALSE, type=\"l\", lwd=2, asp=1)"
  },
  {
    "objectID": "posts/mystery/index.html#a-mystery-curve",
    "href": "posts/mystery/index.html#a-mystery-curve",
    "title": "Mystery curves",
    "section": "A mystery curve",
    "text": "A mystery curve\nNow to add the mystery elements. These are created by adding more circular motion with different amplitude, frequency and phase to our existing circle. For example, lets plot \\(z(t)=i^t + 0.5i^{5t+1}\\).\n\namp=0.5\nfreq=5\nphase=1\n\nz = 1i^t +                      # Our original circle\n  amp*(1i^(freq*t + phase))     # A new cirlce\n\nplot(z, axes=FALSE, ann=FALSE, type=\"l\", lwd=2, asp=1)\n\n\n\n\nThe animation below shows how this curve works. We are adding two circular motions together, the second rotating five times for every one rotation of the first, but with a smaller radius (0.5) and starting from a different angle. Notice how the second circle rotating five times for every one of the main circle leads to 4-fold rotational symmetry in the resulting shape:\n\namp=0.5\nfreq=5\nphase=1\nt = seq(0, 4, l=1000)\n\nfor(j in seq(1,1000,10)){\n\n      z = 1i^t +                        # Our original circle\n          amp*(1i^(freq*t + phase))     # A new cirlce\n      \n      plot(z, axes=FALSE, ann=FALSE, type=\"l\", lwd=2, asp=1)\n\n      lines(c(0,(1i^t)[j],z[j]),lwd=3,col=\"red\") # add lines\n      points(c(0,(1i^t)[j],z[j]),cex=2,pch=20)   # add points\n\n      }\n\n\n\n\nNow when we add another term we get a plot that looks even more interesting. Rather than defining \\(t\\) and typing out the formula for a circle each time, I will create a function to define a circle, then add three circles together as follows:\n\ncircle <- function(amp, freq, phase) amp*1i^(freq*seq(0,4,l=1000)+phase)\n\nz = circle(1,1,0) + circle(0.5,5,0) + circle(0.6,9,1)\n\nplot(z, axes=FALSE, ann=FALSE, type=\"l\", lwd=2, asp=1)\n\n\n\n\nWe can animate the motion similarly to the previous curve:\n\ncircle <- function(amp, freq, phase) amp*1i^(freq*seq(0,4,l=1000)+phase)\n\nfor(j in seq(1,1000,2)){\n\n      z = circle(1,1,0) + circle(0.5,5,0) + circle(0.6,9,1)\n      plot(z, axes=FALSE, ann=FALSE, type=\"l\", lwd=2, asp=1)\n      lps = cumsum(c(0,circle(1,1,0)[j],circle(0.5,5,0)[j],circle(0.6,9,1)[j]))\n      lines(lps,lwd=3,col=\"red\")\n      points(lps,cex=2,pch=20)\n      }\n\n\n\n\nNote that this plot, with three components having frequencies 1, 5 and 9 still has 4-fold rotational symmetry. As Farris explains, the image will have \\(N\\)-fold rotational symmetry if the frequency of each circle has the same remainder when divided by \\(N\\), that is, all frequencies equal mod \\(N\\). Here, 1, 5 and 9 are all 1 (mod 4) and so the image has 4-fold rotational symmetry.\nWe can include negative frequencies as well, so long as we remember this rule. Since \\(-7\\mod 4 =1\\) this will also have 4-fold rotational symmetry:\n\ncircle <- function(amp, freq, phase) amp*1i^(freq*seq(0,4,l=1000)+phase)\n\nfor(j in seq(1,1000,2)){\n      z = circle(1,1,0) + circle(0.5,5,0) + circle(0.6,-7,1)\n      plot(z, axes=FALSE, ann=FALSE, type=\"l\", lwd=2, asp=1)\n      \n      lps = cumsum(c(0,circle(1,1,0)[j],circle(0.5,5,0)[j],circle(0.6,-7,1)[j]))\n      lines(lps,lwd=3,col=\"red\")\n      points(lps,cex=2,pch=20)\n}\n\n\n\n\nWe can alter the shape of a curve over time by changing its parameters as we animate. In the code below, an animation is built with the parameter \\(j\\) which varies from 0 to 4 in 100 steps . The phase shift (starting angle) of the third component is set equal to \\(j\\).\nIn addition, the limits of the plot are now fixed at \\((-2,2)\\) in both dimensions.\n\ncircle <- function(amp, freq, phase) amp*1i^(freq*seq(0,4,l=1000)+phase)\nlimits=c(-1,1)*2\n\nfor( j in seq(0,4,l=100)[-1]){\n\n      z = circle(1,1,0) + circle(0.5,5,0) + circle(0.6,-7,j)\n      \n      plot(z, xlim=limits, ylim=limits,\n           axes=FALSE, ann=FALSE, type=\"l\", \n           lwd=2, asp=1, mar=c(0,0,0,0))\n      }"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my Creative Coding blog.\nFor the past few years I’ve been making pretty things with code.\nI’ve discovered a few tricks along the way, and the aim of this blog is to share these with the community.\nI have learnt a lot from others blog posts, and so with this site hope to give something back.\nMy main language for coding is R, although I hope that the posts will be useful for those using other languages."
  }
]